<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nearest Neighbours on A Hugo website</title>
    <link>/tags/nearest-neighbours/</link>
    <description>Recent content in Nearest Neighbours on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/nearest-neighbours/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nearest neighbour methods</title>
      <link>/2016/05/27/nearest-neighbour-methods/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/05/27/nearest-neighbour-methods/</guid>
      <description>{% include _toc.html %}
In my last post, I started working through some examples given by Hastie et al in Elements of Statistical learning. I looked at using a linear model for classification across a randomly generated training set. In this post I&amp;rsquo;ll use nearest neighbour methods to create a non-linear decision boundary over the same data.
Nearest neighbour algorithm There are much more learned folk than I who give good explanations of the maths behind nearest neighbours, so I won&amp;rsquo;t spend too long on the theory.</description>
    </item>
    
  </channel>
</rss>